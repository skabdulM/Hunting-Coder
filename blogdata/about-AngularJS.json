{
  "title": "AngularJS",
  "description": "AngularJS was a JavaScript-based open-source front-end web framework for developing single-page applications. It was maintained mainly by Google and a community of individuals and corporations. It aimed to simplify both the development and the testing of such applications by providing a framework for client-side model–view–controller (MVC) and model–view–viewmodel (MVVM) architectures, along with components commonly used in web applications and progressive web applications. AngularJS was used as the frontend of the MEAN stack, that consisted of MongoDB database, Express.js web application server framework, AngularJS itself (or Angular), and Node.js server runtime environment. As of January 1, 2022, Google no longer updates AngularJS to fix security, browser compatibility, or jQuery issues.[3][4][5] The Angular team recommends upgrading to Angular (v2+) as the best path forward, but they also provided some other options.[6]Overview The AngularJS framework worked by first reading the Hypertext Markup Language (HTML) page, which had additional custom HTML attributes embedded into it. Angular interpreted those attributes as directives to bind input or output parts of the page to a model that is represented by standard JavaScript variables. The values of those JavaScript variables could be manually set within the code or retrieved from static or dynamic JSON resources. AngularJS was built on the belief that declarative programming should be used to create user interfaces and connect software components, while imperative programming was better suited to defining an application's business logic.[7] The framework adapted and extended traditional HTML to present dynamic content through two-way data-binding that allowed for the automatic synchronization of models and views. As a result, AngularJS de-emphasized explicit Document Object Model (DOM) manipulation with the goal of improving testability and performance. AngularJS's design goals included: to decouple DOM manipulation from application logic. The difficulty of this is dramatically affected by the way the code is structured. to decouple the client side of an application from the server-side. This allows development work to progress in parallel and allows for reuse of both sides. to provide structure for the journey of building an application: from designing the UI, through writing the business logic, to testing. AngularJS implemented the MVC pattern to separate presentation, data, and logic components.[8] Using dependency injection, Angular brought traditionally server-side services, such as view-dependent controllers, to client-side web applications. Consequently, much of the burden on the server could be reduced. Scope AngularJS used the term scope in a manner akin to the fundamentals of computer science. Scope in computer science describes when in the program a particular binding is valid. The ECMA-262 specification defines scope as: a lexical environment in which a Function object is executed in client-side web scripts;[9] akin to how scope is defined in lambda calculus.[10] As a part of the MVC architecture, the scope forms the Model, and all variables defined in the scope can be accessed by the View as well as the Controller. The scope behaves as a glue and binds the View and the Controller. Bootstrap The task performed by the AngularJS bootstrapper occurred in three phases[11] after the DOM has been loaded: Creation of a new Injector Compilation of the directives that decorate the DOM Linking of all directives to scope AngularJS directives allowed the developer to specify custom and reusable HTML-like elements and attributes that define data bindings and the behavior of presentation components. Some of the most commonly used directives were: ng-animate A module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives. Since ng-* attributes are not valid in HTML specifications, data-ng-* can also be used as a prefix. For example, both ng-app and data-ng-app are valid in AngularJS. ng-app Declares the root element of an AngularJS application, under which directives can be used to declare bindings and define behavior. ng-aria A module for accessibility support of common ARIA attributes. ng-bind Sets the text of a DOM element to the value of an expression. For example, <span ng-bind=name></span> displays the value of name inside the span element. Any change to the variable in the application's scope reflect instantly in the DOM. ng-class Conditionally apply a class, depending on the value of a boolean expression. ng-controller Specifies a JavaScript controller class that evaluates HTML expressions. ng-if Basic if statement directive that instantiates the following element if the conditions are true. When the condition is false, the element is removed from the DOM. When true, a clone of the compiled element is re-inserted. ng-init Called once when the element is initialized. ng-model Similar to ng-bind, but establishes a two-way data binding between the view and the scope. ng-model-options Provides tuning for how model updates are done. ng-repeat Instantiate an element once per item from a collection. ng-show & ng-hide Conditionally show or hide an element, depending on the value of a boolean expression. Show and hide is achieved by setting the CSS display style. ng-switch Conditionally instantiate one template from a set of choices, depending on the value of a selection expression. ng-view The base directive responsible for handling routes[12] that resolve JSON before rendering templates driven by specified controllers. Two-way data binding AngularJS two-way data binding had its most notable feature, largely relieving the server backend of templating responsibilities. Instead, templates were rendered in plain HTML according to data contained in a scope defined in the model. The $scope service in Angular detected changes to the model section and modified HTML expressions in the view via a controller. Likewise, any alterations to the view were reflected in the model. This circumvented the need to actively manipulate the DOM and encouraged bootstrapping and rapid prototyping of web applications.[13] AngularJS detected changes in models by comparing the current values with values stored earlier in a process of dirty-checking, unlike Ember.js and Backbone.js that triggered listeners when the model values are changed.[14] $watch is an angular method used for dirty checking. Any variable or expression assigned in $scope automatically sets up a $watchExpression in angular. So assigning a variable to $scope or using directives like ng-if, ng-show, ng-repeat etc. all create watches in angular scope automatically. Angular maintains a simple array of $$watchers in the $scope objects Different ways of defining a watcher in AngularJS. explicitly $watch an attribute on $scope. $scope.$watch('person.username', validateUnique); place an interpolation in your template (a watcher will be created for you on the current $scope). ask a directive such as ng-model to define the watcher for you. <input ng-model=person.username /> $digest is angular method that is invoked internally by angularjs in frequent intervals. In $digest method, angular iterates over all $watches in its scope/child scopes. $apply is an angular method that internally invokes $digest. This method is used when you want to tell angular manually start dirty checking (execute all $watches) $destroy is both a method and event in angularjs. $destroy() method, removes a scope and all its children from dirty checking. $destroy event is called by angular whenever a $scope or $controller is destroyed. Development history AngularJS was originally developed in 2009 by Miško Hevery[15] at Brat Tech LLC[16] as the software behind an online JSON storage service, that would have been priced by the megabyte, for easy-to-make applications for the enterprise. This venture was located at the web domain GetAngular.com,[16] and had a few subscribers, before the two decided to abandon the business idea and release Angular as an open-source library. The 1.6 release added many of the concepts of Angular to AngularJS, including the concept of a component-based application architecture.[17] This release among others removed the Sandbox, which many developers believed provided additional security, despite numerous vulnerabilities that had been discovered that bypassed the sandbox.[18] The current (as of March 2020) stable release of AngularJS is 1.7.9[19] In January 2018, a schedule was announced for phasing-out AngularJS: after releasing 1.7.0, the active development on AngularJS would continue till June 30, 2018. Afterwards, 1.7 was supported till December 31, 2021 as long-term support.[4][5] Legacy browser support Versions 1.3 and later of AngularJS did not support Internet Explorer 8 or earlier. While AngularJS 1.2 supported IE8, its team does not.[20][21] Angular and AngularDart Subsequent versions of AngularJS are simply called Angular.[22] Angular is an incompatible TypeScript-based rewrite of AngularJS. Angular 4 was announced on 13 December 2016, skipping 3 to avoid a confusion due to the misalignment of the router package's version which was already distributed as v3.3.0.[23] AngularDart works on Dart, which is an object-oriented, class defined, single inheritance programming language using C style syntax, that is different from Angular JS (which uses JavaScript) and Angular 2/ Angular 4 (which uses TypeScript). Angular 4 released in March 2017, with the framework's version aligned with the version number of the router it used. Angular 5 was released on November 1, 2017.[24] Key improvements in Angular 5 include support for progressive Web apps, a build optimizer and improvements related to Material Design.[25] Angular 6 was released on 3 May 2018,[26] Angular 7 was released on 18 October 2018, and Angular 8 was released on May 28, 2019. Angular follows Semantic Versioning standards, with each major version number indicating potentially breaking changes. Angular has pledged to provide 6 months of active support for each major version followed by 12 months of long term support. Major releases are bi-yearly with 1 to 3 minor releases for every major release.[27] Angular Universal A normal Angular application executes in the browser, while Angular Universal generates static application pages on the server through server-side rendering (SSR).[28]",
  "author":"Shaikh Abdul Mannan",
  "slug":"about-AngularJS"
}
